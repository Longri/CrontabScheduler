plugins {
    id 'java'
    id 'application'
    id "org.ajoberstar.grgit" version "5.3.0"
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'maven-publish'
    id "com.github.ben-manes.versions" version "0.52.0"
}

group = 'de.longri'
version = '1.3.0'

ext {
    junitVersion = '5.11.4'
}

repositories {
    mavenCentral()
    maven {
        url "https://nexus.longri.de/repository/maven-public/"
        allowInsecureProtocol = true
    }
}

javafx {
    version = '24-ea+5'
    modules = ['javafx.controls', 'javafx.fxml', "javafx.web", "javafx.swing"]
}


dependencies {
//    implementation 'de.longri:fxutils:1.11.0'

    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.quartz-scheduler:quartz:2.5.0-rc1'
    implementation 'org.ini4j:ini4j:0.5.4'
    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    implementation(group: 'commons-cli', name: 'commons-cli', version: "1.9.0")
    implementation(group: 'commons-io', name: 'commons-io', version: '2.18.0')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    //needed for MainTest
    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'

}

test {
    useJUnitPlatform()
}

dependencyUpdates {
    resolutionStrategy {
        componentSelection {
            all {
                // Schließt alle Abhängigkeiten aus, die mit 'org.openjfx' (JavaFX) beginnen
                if (candidate.group == 'org.openjfx') {
                    reject('JavaFX dependencies are excluded')
                }
                if (candidate.group == 'org.junit.jupiter') {
                    reject('JUnit dependencies are excluded')
                }
                  if (candidate.group == 'org.quartz-scheduler') {
                      reject('org.quartz-scheduler dependencies are excluded')
            }     }                                                 
        }
    }
}

// Publish with task => PUBLISH_TO_NEXUS


if (file('gradle.properties.local').exists()) {
    def props = new Properties()
    file('gradle.properties.local').withInputStream { props.load(it) }
    props.each { key, value -> project.ext.set(key, value) }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/" + rootProject.name + "-" + version + ".jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            name 'deploy'
            url deployRepoUrl
            allowInsecureProtocol = true
            credentials {
                username = deployRepoUsername
                password = deployRepoPassword
            }
        }
    }
}
task _FAT_JAR(dependsOn: test, type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': 'com.longri'
    }
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    with jar
}
task _CLEAN_TO_NEXUS {
}
task _BUILD_TO_NEXUS(dependsOn: _CLEAN_TO_NEXUS) {
}
task PUBLISH_TO_NEXUS(dependsOn: _BUILD_TO_NEXUS) {
    println "PUBLISH_TO_NEXUS version $version"
}
_CLEAN_TO_NEXUS.dependsOn(clean)
_BUILD_TO_NEXUS.dependsOn(_FAT_JAR)
PUBLISH_TO_NEXUS.mustRunAfter(_FAT_JAR)
PUBLISH_TO_NEXUS.dependsOn(publishAllPublicationsToDeployRepository)
publishMavenPublicationToDeployRepository.dependsOn(_FAT_JAR)

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }
tasks.withType(Jar).all { duplicatesStrategy 'exclude' }